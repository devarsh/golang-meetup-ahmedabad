
Concurrency Deep Dive

Girish Ramnani
girishramnani95@gmail.com

Devarsh Shah
devarshmshah@gmail.com

* Overview

- Theory
- Concurrency Models
- CSP
- Channels and go routines
- Concurrency patterns
- atomic package
- Exercises

* Concurrency is not parallelism

.image assets_cdd/images/candp.png 480 _

* Concurrency Models

- Processor Threads
- Events
- Callbacks and Promises
- Communicating Sequential Processes

* Process Threads

*** Advantages

- Control
- Performance
- Responsive User Interface

*** Disadvantages

- Poor Performance
- Memory Consumption
- Shared Memory

* Events

*** Advantages

- Memory Isolation
- Separate Callee from caller

*** Disadvantages

- Traceability
- Synchronizing Receivers

* Callbacks and Promises

*** Advantages

- Memory Isolation
- Simplifying async operations

*** Disadvantages

- Pyramid of Doom
- Inversion of control issue

* Communicating Sequential Processes ( Gold!! )

*** Advantages

- Decoupled Actors
- Multiple Consumers ( Handlers )
- Message Isolation

*** Disadvantages

- Complicated Mental Model
- Traceability

* Concurrency in Go

- No thread primitives
- Go routines
- Channels

* Go routines

.play assets_cdd/code/goroutine_1.go

* Using WaitGroup

.play assets_cdd/code/goroutine_1_m.go

* Example

.link stockData assets_cdd/code/goroutine_2.go

* Channels

- Communication
- Locking

* Example

.play assets_cdd/code/channel_1.go

* Cont ..

.play assets_cdd/code/channel_2.go

* Solutions

.play assets_cdd/code/channel_3.go /^func main/,/^}/

.play assets_cdd/code/channel_4.go /^func main/,/^}/


* Select

Used to wait on multiple channels

    select {

        case data := <-channel :
            fmt.Println("got data ",data)
        case <- time.After(1*time.Second) :
            fmt.Println("sorry timed out")

    }


can have a default section

    ....

    default:
        fmt.Println("Cant wait for the go routine")


* Select Example #1

.code assets_cdd/code/waitTimeout.go



* Exercise

Lets parallelize this code

.play assets_cdd/code/getpages.go /^func main/,/^}/

* Lets go simple

By creating a function

.code assets_cdd/code/getpages_c1.go /^func getHTML/,/^}/

* So the main func becomes

.play assets_cdd/code/getpages_c1.go /^func main/,/^}/

* Some thing wrong there?

* Lets start with a simple pipeline

.code assets_cdd/code/pipeline.go /^func generate/,/^}/

* The pipe

.code assets_cdd/code/pipeline.go /^func pipe/,/^}/

* running the code

.play assets_cdd/code/pipeline.go /^func main/,/^}/

.link assets_cdd/code/pipeline.go here is the full code

* Power of Go Routines

.play -edit assets_cdd/code/moreExamples/chainReaction.go /START OMIT/,/END OMIT/

* FanIn-FanOut

.play assets_cdd/code/moreExamples/fanin.go /^func main/,/^}/

* Cont ..

.play assets_cdd/code/moreExamples/fanin.go /^func merge/,/^}/

.link assets_cdd/code/moreExamples/fanin.go here is the full code

* Pub Sub

.play assets_cdd/code/moreExamples/pubsub.go /^func main/,/^}/

* Cont ..

.play assets_cdd/code/moreExamples/pubsub.go /START OMIT/,/END OMIT/

* Rate Limiter

.play -edit assets_cdd/code/moreExamples/rateLimiter.go /^func main/,/^}/

* Tcp Chat Server

.link assets_cdd/code/moreExamples/tcp_chatServer.go

* Exercise 1

Find the index of one from the right side for a data word.
    Eg. 1001000 -> 3


* Exercise 2

Create an atomic counter which doesn't use channels and mutexes.

.link assets_cdd/code/atomicCounter.zip Counter

* Exercise 3 (Intermediate)

You have given a database which is ACID complient or so it says!!.
Now to be sure you need to implement pessimistic Concurrency control
over the database. Try to not look the whole DB for a single transaction.
Just create the locking mechanism here.

.link assets_cdd/code/mapped_mutex.zip Testfile

* Thank you
